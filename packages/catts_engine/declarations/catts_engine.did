type CanisterSettingsInput = record {
  ecdsa_key_id : text;
  siwe_provider_canister : text;
  evm_rpc_canister : text;
};
type ChangeLogAction = variant { Delete; Create; Update };
type ChangeLogItem = record {
  id : text;
  action : ChangeLogAction;
  type_name : ChangeLogTypeName;
  patch : text;
};
type ChangeLogResponse = record {
  data : vec IndexedChangeLogItem;
  total_count : nat32;
};
type ChangeLogTypeName = variant { Run; Recipe; User };
type HttpError = record { code : nat16; message : text; details : opt text };
type HttpHeader = record { value : text; name : text };
type HttpResponse = record {
  status : nat;
  body : blob;
  headers : vec HttpHeader;
};
type IndexedChangeLogItem = record { data : ChangeLogItem; index : nat32 };
type LogItem = record { level : LogLevel; message : text; timestamp : nat64 };
type LogLevel = variant { Error; Info; Warn; Debug };
type Recipe = record {
  id : blob;
  resolver : text;
  created : nat32;
  creator : text;
  schema : text;
  name : text;
  description : opt text;
  display_name : opt text;
  keywords : opt vec text;
  queries : vec RecipeQuery;
  publish_state : RecipePublishState;
  processor : text;
  revokable : bool;
};
type RecipeDetailsInput = record {
  resolver : text;
  schema : text;
  name : text;
  description : opt text;
  display_name : opt text;
  keywords : opt vec text;
  queries : vec RecipeQuery;
  processor : text;
  revokable : bool;
};
type RecipePublishState = variant { Draft; Unpublished; Published };
type RecipeQuery = record { endpoint : text; "query" : text; variables : text };
type Result = variant { Ok : text; Err : text };
type Result_1 = variant { Ok : ChangeLogResponse; Err : HttpError };
type Result_2 = variant { Ok : Recipe; Err : HttpError };
type Result_3 = variant { Ok : vec Recipe; Err : text };
type Result_4 = variant { Ok : Run; Err : HttpError };
type Result_5 = variant { Ok : User; Err : HttpError };
type Run = record {
  id : blob;
  gas : opt nat;
  created : nat32;
  creator : text;
  user_fee : opt nat;
  attestation_uid : opt text;
  attestation_transaction_hash : opt text;
  base_fee_per_gas : opt nat;
  max_priority_fee_per_gas : opt nat;
  recipe_id : blob;
  payment_block_number : opt nat;
  is_cancelled : bool;
  error : opt text;
  chain_id : nat32;
  payment_log_index : opt nat;
  payment_transaction_hash : opt text;
};
type TransformArgs = record { context : blob; response : HttpResponse };
type User = record { eth_address : text };
service : (CanisterSettingsInput) -> {
  canister_eth_address : () -> (Result);
  change_log : (nat32, opt nat32) -> (Result_1) query;
  logs : () -> (vec LogItem) query;
  recipe_create : (RecipeDetailsInput, text) -> (Result_2);
  recipe_delete : (blob) -> (Result_2);
  recipe_get_by_id : (blob) -> (Result_2) query;
  recipe_get_by_name : (text) -> (Result_2) query;
  recipe_list : () -> (Result_3) query;
  recipe_publish : (blob) -> (Result_2);
  run_cancel : (blob) -> (Result_4);
  run_create : (blob, nat32) -> (Result_4);
  run_get : (blob) -> (Result_4) query;
  run_register_payment : (blob, text, nat) -> (Result_4);
  transform : (TransformArgs) -> (HttpResponse) query;
  user_create : () -> (Result_5);
  user_get : () -> (Result_5) query;
  user_get_by_eth_address : (text) -> (Result_5) query;
  user_get_by_principal : (blob) -> (Result_5) query;
}
