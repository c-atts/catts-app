type Error = record { code : nat16; message : text; details : opt text };
type HttpHeader = record { value : text; name : text };
type HttpResponse = record {
  status : nat;
  body : blob;
  headers : vec HttpHeader;
};
type LogItem = record { level : LogLevel; message : text; timestamp : nat64 };
type LogLevel = variant { Error; Info; Warn; Debug };
type PaymentVerifiedStatus = variant { VerificationFailed; Verified; Pending };
type Recipe = record {
  id : blob;
  gas : nat;
  created : nat64;
  creator : blob;
  slug : text;
  query_variables : vec text;
  description : opt text;
  display_name : text;
  version : text;
  keywords : opt vec text;
  queries : vec text;
  output_schema : text;
  processor : text;
  query_settings : vec text;
};
type Result = variant { Ok : text; Err : text };
type Result_1 = variant { Ok : UserProfile; Err : Error };
type Result_2 = variant { Ok : vec record { text; UserProfile }; Err : text };
type Result_3 = variant { Ok : Recipe; Err : Error };
type Result_4 = variant { Ok : vec Recipe; Err : text };
type Result_5 = variant { Ok : Run; Err : Error };
type Result_6 = variant { Ok : vec Run; Err : Error };
type Run = record {
  id : blob;
  fee : nat;
  created : nat64;
  creator : blob;
  attestation_uid : opt text;
  attestation_transaction_hash : opt text;
  recipe_id : blob;
  is_cancelled : bool;
  chain_id : nat64;
  attestation_create_error : opt text;
  payment_verified_status : opt PaymentVerifiedStatus;
  payment_transaction_hash : opt text;
};
type TransformArgs = record { context : blob; response : HttpResponse };
type UserProfile = record {
  credits : nat32;
  avatar_url : text;
  name : text;
  address : text;
};
service : (text) -> {
  canister_eth_address : () -> (Result);
  logs : () -> (vec LogItem) query;
  profile_get_current : () -> (Result_1);
  profile_list : () -> (Result_2) query;
  profile_save_current : (text, text) -> (Result_1);
  recipe_get_by_id : (blob) -> (Result_3) query;
  recipe_get_by_slug : (text) -> (Result_3) query;
  recipe_list : () -> (Result_4) query;
  run_cancel : (blob) -> (Result_5);
  run_create : (blob, nat64) -> (Result_5);
  run_get : (blob) -> (Result_5) query;
  run_list_for_user : () -> (Result_6);
  run_register_payment : (blob, text, nat) -> (Result_5);
  transform : (TransformArgs) -> (HttpResponse) query;
}
