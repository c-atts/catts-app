type Error = record {
  code : HttpStatusCode;
  message : text;
  details : opt text;
};
type HttpHeader = record { value : text; name : text };
type HttpResponse = record {
  status : nat;
  body : blob;
  headers : vec HttpHeader;
};
type HttpStatusCode = variant {
  "400";
  BadGateway;
  MethodNotAllowed;
  InternalServerError;
  NotFound;
  Unauthorized;
  ServiceUnavailable;
  NotImplemented;
  Forbidden;
};
type Recipe = record {
  id : blob;
  created : nat64;
  creator : blob;
  name : text;
  query_variables : vec text;
  description : opt text;
  version : text;
  keywords : opt vec text;
  queries : vec text;
  output_schema : text;
  processor : text;
  query_settings : vec text;
};
type Result = variant { Ok : Run; Err : Error };
type Result_1 = variant { Ok : text; Err : text };
type Result_2 = variant { Ok : text; Err : Error };
type Result_3 = variant { Ok : UserProfile; Err : Error };
type Result_4 = variant { Ok : vec Run; Err : Error };
type Result_5 = variant { Ok : vec record { text; UserProfile }; Err : text };
type Result_6 = variant { Ok : vec Recipe; Err : text };
type Run = record {
  id : blob;
  status : RunStatus;
  created : nat64;
  creator : blob;
  attestation_uid : opt text;
  attestation_transaction_hash : opt text;
  cost : nat;
  recipe_id : blob;
  attestation_chain : opt text;
  payment_transaction_hash : opt text;
};
type RunStatus = variant { Failed; Paid; Cancelled; Created; Completed };
type TransformArgs = record { context : blob; response : HttpResponse };
type UserProfile = record {
  credits : nat32;
  avatar_url : text;
  name : text;
  address : text;
};
service : (text) -> {
  cancel_run : (blob) -> (Result);
  canister_eth_address : () -> (Result_1);
  get_attestation_uid : (blob) -> (Result_2);
  get_my_profile : () -> (Result_3);
  get_my_runs : () -> (Result_4);
  init_run : (blob) -> (Result);
  list_profiles : () -> (Result_5) query;
  list_recipes : () -> (Result_6) query;
  run : (blob) -> (Result_2);
  save_my_profile : (text, text) -> (Result_3);
  transform : (TransformArgs) -> (HttpResponse) query;
}
