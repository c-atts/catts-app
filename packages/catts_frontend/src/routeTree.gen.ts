/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SearchImport } from './routes/search'
import { Route as RunsImport } from './routes/runs'
import { Route as RecipesImport } from './routes/recipes'
import { Route as PopularImport } from './routes/popular'

// Create Virtual Routes

const ExplorerLazyImport = createFileRoute('/explorer')()
const IndexLazyImport = createFileRoute('/')()
const UserAddressLazyImport = createFileRoute('/user/$address')()
const RunRunIdLazyImport = createFileRoute('/run/$runId')()
const RecipeRecipeNameLazyImport = createFileRoute('/recipe/$recipeName')()

// Create/Update Routes

const ExplorerLazyRoute = ExplorerLazyImport.update({
  id: '/explorer',
  path: '/explorer',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/explorer.lazy').then((d) => d.Route))

const SearchRoute = SearchImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRoute,
} as any)

const RunsRoute = RunsImport.update({
  id: '/runs',
  path: '/runs',
  getParentRoute: () => rootRoute,
} as any)

const RecipesRoute = RecipesImport.update({
  id: '/recipes',
  path: '/recipes',
  getParentRoute: () => rootRoute,
} as any)

const PopularRoute = PopularImport.update({
  id: '/popular',
  path: '/popular',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const UserAddressLazyRoute = UserAddressLazyImport.update({
  id: '/user/$address',
  path: '/user/$address',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/user.$address.lazy').then((d) => d.Route))

const RunRunIdLazyRoute = RunRunIdLazyImport.update({
  id: '/run/$runId',
  path: '/run/$runId',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/run.$runId.lazy').then((d) => d.Route))

const RecipeRecipeNameLazyRoute = RecipeRecipeNameLazyImport.update({
  id: '/recipe/$recipeName',
  path: '/recipe/$recipeName',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/recipe.$recipeName.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/popular': {
      id: '/popular'
      path: '/popular'
      fullPath: '/popular'
      preLoaderRoute: typeof PopularImport
      parentRoute: typeof rootRoute
    }
    '/recipes': {
      id: '/recipes'
      path: '/recipes'
      fullPath: '/recipes'
      preLoaderRoute: typeof RecipesImport
      parentRoute: typeof rootRoute
    }
    '/runs': {
      id: '/runs'
      path: '/runs'
      fullPath: '/runs'
      preLoaderRoute: typeof RunsImport
      parentRoute: typeof rootRoute
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchImport
      parentRoute: typeof rootRoute
    }
    '/explorer': {
      id: '/explorer'
      path: '/explorer'
      fullPath: '/explorer'
      preLoaderRoute: typeof ExplorerLazyImport
      parentRoute: typeof rootRoute
    }
    '/recipe/$recipeName': {
      id: '/recipe/$recipeName'
      path: '/recipe/$recipeName'
      fullPath: '/recipe/$recipeName'
      preLoaderRoute: typeof RecipeRecipeNameLazyImport
      parentRoute: typeof rootRoute
    }
    '/run/$runId': {
      id: '/run/$runId'
      path: '/run/$runId'
      fullPath: '/run/$runId'
      preLoaderRoute: typeof RunRunIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/user/$address': {
      id: '/user/$address'
      path: '/user/$address'
      fullPath: '/user/$address'
      preLoaderRoute: typeof UserAddressLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/popular': typeof PopularRoute
  '/recipes': typeof RecipesRoute
  '/runs': typeof RunsRoute
  '/search': typeof SearchRoute
  '/explorer': typeof ExplorerLazyRoute
  '/recipe/$recipeName': typeof RecipeRecipeNameLazyRoute
  '/run/$runId': typeof RunRunIdLazyRoute
  '/user/$address': typeof UserAddressLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/popular': typeof PopularRoute
  '/recipes': typeof RecipesRoute
  '/runs': typeof RunsRoute
  '/search': typeof SearchRoute
  '/explorer': typeof ExplorerLazyRoute
  '/recipe/$recipeName': typeof RecipeRecipeNameLazyRoute
  '/run/$runId': typeof RunRunIdLazyRoute
  '/user/$address': typeof UserAddressLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/popular': typeof PopularRoute
  '/recipes': typeof RecipesRoute
  '/runs': typeof RunsRoute
  '/search': typeof SearchRoute
  '/explorer': typeof ExplorerLazyRoute
  '/recipe/$recipeName': typeof RecipeRecipeNameLazyRoute
  '/run/$runId': typeof RunRunIdLazyRoute
  '/user/$address': typeof UserAddressLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/popular'
    | '/recipes'
    | '/runs'
    | '/search'
    | '/explorer'
    | '/recipe/$recipeName'
    | '/run/$runId'
    | '/user/$address'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/popular'
    | '/recipes'
    | '/runs'
    | '/search'
    | '/explorer'
    | '/recipe/$recipeName'
    | '/run/$runId'
    | '/user/$address'
  id:
    | '__root__'
    | '/'
    | '/popular'
    | '/recipes'
    | '/runs'
    | '/search'
    | '/explorer'
    | '/recipe/$recipeName'
    | '/run/$runId'
    | '/user/$address'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  PopularRoute: typeof PopularRoute
  RecipesRoute: typeof RecipesRoute
  RunsRoute: typeof RunsRoute
  SearchRoute: typeof SearchRoute
  ExplorerLazyRoute: typeof ExplorerLazyRoute
  RecipeRecipeNameLazyRoute: typeof RecipeRecipeNameLazyRoute
  RunRunIdLazyRoute: typeof RunRunIdLazyRoute
  UserAddressLazyRoute: typeof UserAddressLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  PopularRoute: PopularRoute,
  RecipesRoute: RecipesRoute,
  RunsRoute: RunsRoute,
  SearchRoute: SearchRoute,
  ExplorerLazyRoute: ExplorerLazyRoute,
  RecipeRecipeNameLazyRoute: RecipeRecipeNameLazyRoute,
  RunRunIdLazyRoute: RunRunIdLazyRoute,
  UserAddressLazyRoute: UserAddressLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/popular",
        "/recipes",
        "/runs",
        "/search",
        "/explorer",
        "/recipe/$recipeName",
        "/run/$runId",
        "/user/$address"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/popular": {
      "filePath": "popular.tsx"
    },
    "/recipes": {
      "filePath": "recipes.tsx"
    },
    "/runs": {
      "filePath": "runs.tsx"
    },
    "/search": {
      "filePath": "search.tsx"
    },
    "/explorer": {
      "filePath": "explorer.lazy.tsx"
    },
    "/recipe/$recipeName": {
      "filePath": "recipe.$recipeName.lazy.tsx"
    },
    "/run/$runId": {
      "filePath": "run.$runId.lazy.tsx"
    },
    "/user/$address": {
      "filePath": "user.$address.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
