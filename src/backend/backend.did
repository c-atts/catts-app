type Recipe = record {
  created : nat64;
  name : text;
  homepage : opt text;
  query_variables : vec text;
  description : opt text;
  author : opt text;
  version : text;
  keywords : opt vec text;
  queries : vec text;
  output_schema : text;
  processor : text;
  query_settings : vec text;
};
type Result = variant { Ok : Run; Err : text };
type Result_1 = variant { Ok : UserProfile; Err : text };
type Result_2 = variant { Ok : vec Run; Err : text };
type Result_3 = variant { Ok : vec record { text; UserProfile }; Err : text };
type Result_4 = variant { Ok : vec Recipe; Err : text };
type Result_5 = variant { Ok : RunResult; Err : text };
type Run = record {
  id : blob;
  status : RunStatus;
  attestations : opt vec text;
  created : nat64;
  creator : blob;
  cost : nat;
  chain : opt text;
  recipe_id : text;
  run_attestation_uid : opt text;
  payment_transaction_hash : opt text;
};
type RunResult = record { s : text };
type RunStatus = variant { Failed; Paid; Cancelled; Created; Completed };
type UserProfile = record {
  credits : nat32;
  avatar_url : text;
  name : text;
  address : text;
};
service : (text) -> {
  cancel_run : (blob) -> (Result);
  get_my_profile : () -> (Result_1);
  get_my_runs : () -> (Result_2);
  init_run : (text) -> (Result);
  list_profiles : () -> (Result_3) query;
  list_recipes : () -> (Result_4) query;
  run : (blob) -> (Result_5);
  save_my_profile : (text, text) -> (Result_1);
}
